# This file was auto-generated by lib/generators/tasks/generate.rb

module Slack
  module Endpoint
    module Apps
      #
      # Returns list of permissions this app has on a team.
      #
      # @see https://api.slack.com/methods/apps.permissions.info
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.info.md
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.info.json
      def apps_permissions_info(options={})
        post("apps.permissions.info", options)
      end

      #
      # Allows an app to request additional scopes
      #
      # @option options [Object] :scopes
      #   A comma separated list of scopes to request for
      # @option options [Object] :trigger_id
      #   Token used to trigger the permissions API
      # @see https://api.slack.com/methods/apps.permissions.request
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.request.md
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.request.json
      def apps_permissions_request(options={})
        throw ArgumentError.new("Required arguments :scopes missing") if options[:scopes].nil?
        throw ArgumentError.new("Required arguments :trigger_id missing") if options[:trigger_id].nil?
        post("apps.permissions.request", options)
      end

      #
      # Returns list of resource grants this app has on a team.
      #
      # @option options [Object] :cursor
      #   Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
      # @option options [Object] :limit
      #   The maximum number of items to return.
      # @see https://api.slack.com/methods/apps.permissions.resources.list
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.resources.list.md
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.resources.list.json
      def apps_permissions_resources_list(options={})
        post("apps.permissions.resources.list", options)
      end

      #
      # Returns list of scopes this app has on a team.
      #
      # @see https://api.slack.com/methods/apps.permissions.scopes.list
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.scopes.list.md
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.scopes.list.json
      def apps_permissions_scopes_list(options={})
        post("apps.permissions.scopes.list", options)
      end

      #
      # Returns list of user grants and corresponding scopes this app has on a team.
      #
      # @option options [Object] :cursor
      #   Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first "page" of the collection. See pagination for more detail.
      # @option options [Object] :limit
      #   The maximum number of items to return.
      # @see https://api.slack.com/methods/apps.permissions.users.list
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.users.list.md
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.users.list.json
      def apps_permissions_users_list(options={})
        post("apps.permissions.users.list", options)
      end

      #
      # Enables an app to trigger a permissions modal to grant an app access to a user access scope.
      #
      # @option options [Object] :scopes
      #   A comma separated list of user scopes to request for
      # @option options [Object] :trigger_id
      #   Token used to trigger the request
      # @option options [Object] :user
      #   The user this scope is being requested for
      # @see https://api.slack.com/methods/apps.permissions.users.request
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.users.request.md
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.permissions.users.request.json
      def apps_permissions_users_request(options={})
        throw ArgumentError.new("Required arguments :scopes missing") if options[:scopes].nil?
        throw ArgumentError.new("Required arguments :trigger_id missing") if options[:trigger_id].nil?
        throw ArgumentError.new("Required arguments :user missing") if options[:user].nil?
        post("apps.permissions.users.request", options)
      end

      #
      # Uninstalls your app from a workspace.
      #
      # @option options [Object] :client_id
      #   Issued when you created your application.
      # @option options [Object] :client_secret
      #   Issued when you created your application.
      # @see https://api.slack.com/methods/apps.uninstall
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.uninstall.md
      # @see https://github.com/aki017/slack-api-docs/blob/master/methods/apps.uninstall.json
      def apps_uninstall(options={})
        throw ArgumentError.new("Required arguments :client_id missing") if options[:client_id].nil?
        throw ArgumentError.new("Required arguments :client_secret missing") if options[:client_secret].nil?
        post("apps.uninstall", options)
      end

    end
  end
end
